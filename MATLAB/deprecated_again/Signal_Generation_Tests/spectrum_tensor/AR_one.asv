clc;clear;close all hidden;
addpath(genpath('../../GL_classes/'));
rng('default')
%%
signal_params.N = 4;
signal_params.raw = 1;

signal_params.SNR = 2e3;
signal_params.Fs = 100;
signal_params.min_freq = 2;
signal_params.max_freq = 45;

signal_params.intervals = signal_params.N;
signal_params.interval_length = 128;
signal_params.M = signal_params.intervals*signal_params.interval_length;

signal_params.order = 1;
signal_params.zero_variance = 1;
signal_params.zero_mean = 1;
signal_params.pole_variance = .25;
signal_params.pole_mean = .5;

%%
AR_params.N = signal_params.N;
AR_params.P = 10;
AR_params.gamma = 100;
AR_params.threshold = 0;
%% 
[L_0,A] = graphs.create(signal_params,'er',.2);
A_0 = graphs.to_directed(A);
G = graphs.createGraphTensor(signal_params,A_0);
x = randn(signal_params.N,signal_params.M);
x = signals.create_raw_sine(signal_params);
X = signals.createTensorSpectrum(signal_params,x);
Y = signals.filterTensorSpectrum(signal_params,X,G);
y = signals.inverseTensorSpectrum(signal_params,Y);

figure;
subplot(2,2,1);plot(x(2,1:signal_params.interval_length)');
subplot(2,2,2);plot(y(2,1:signal_params.interval_length)');

y_noisy = signals.add_noise(signal_params,y);

[fits,aic,p] = signals.test_fit(y_noisy(1,1:signal_params.interval_length));
[fits2,aic2,p2] = signals.test_fit(x(1,1:signal_params.interval_length));

figure;
signals.plot([x(1,1:signal_params.interval_length)' y(1,1:signal_params.interval_length)']);

figure;
signals.plot([fits fits2]);

%%
L = zeros(signal_params.N,signal_params.N,signal_params.intervals);
for i = 1:signal_params.intervals
    L(:,:,i) = GL.AR(y_noisy(:,(1+(i-1)*signal_params.interval_length):(i*signal_params.interval_length)),AR_params);
end
L = mean(L,3);
%%
figure;
graphs.vcompare(L_0,L,'L_0','L');