clc;clear;close all hidden;
addpath(genpath("../graph_creation/"));
addpath(genpath("../GL_algorithms/"));
addpath(genpath("../graph_accuracy/"));
%% Parameters
N = 20;
M=100;
num_active = 5;
trials = 20;

gammas = logspace(-4,4,40);
thresholds = 0:.005:.5;
for k = 1:length(gammas)
    fmeasures = zeros(trials,length(thresholds));
    parfor i = 1:trials
        [A,XCoords, YCoords] = construct_graph(N,'er',0.2);
        L_0 = adjacency_to_laplacian(A);
        L_0 = L_0*N/trace(L_0);
        
        I = zeros(N,M);
        active = randperm(N,num_active)
        I(active,:) = randn(num_active,M);
        V = pinv(L_0)*I;
        
        Q = create_Q_matrix(N,1);
        c = create_c_vec(N,V)*gamma;
        A = create_constraint_matrix(N);
        b = create_constraint_vec(N,N);
        options = optimset('Display', 'off');
        [phi,f] = quadprog(Q,c,A(N+2:end,:),b(N+2:end),A(1:N+1,:),b(1:N+1),-Inf(size(Q,1),1),Inf(size(Q,1),1),zeros(size(Q,1),1),options); %% switched to quadprog...
        l = create_dup_matrix(N)*phi;
        L = convert_to_matrix(l);
        
        for t = 1:length(thresholds)
            L(abs(L)<.05) = 0;
        end
    end
    F(:,k) = mean(fmeasures,2);
end
%% Metrics
vcompare(L_0,L)
[precision, recall, Fmeasure, NMI, num_of_edges] = graph_learning_perf_eval(L_0,L)